import express from "express";
import multer from "multer";
import axios from "axios";
import fs from "fs";
import path from "path";
import {fileURLToPath} from 'url';
import {fileTypeFromFile} from 'file-type';
import cookieParser from 'cookie-parser';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import {v4 as uuidv4} from 'uuid';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
app.use(express.json());
app.use(cookieParser());
const uploadDir = path.join(__dirname, 'uploads');
app.use('/uploads', express.static(uploadDir));

const users = [];

app.use(express.static(path.join(__dirname, 'public')));

if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir);
}

const upload = multer({
    dest: uploadDir,
});


// region UTILS

const checkAdmin = (req, res, next) => {
    const {jwt: token} = req.cookies;

    if (!token)
        return res.status(401).json({
            message: 'Token not provided'
        });

    jwt.verify(token, jwtToken, (err, decoded) => {
        if (err)
            return res.status(401).json({
                message: 'Invalid token'
            });

        const user = users.find(user => user.email === decoded.email);
        if (!user)
            return res.status(401).json({
                message: 'User not found'
            });

        if (user.user_type !== 'admin') {
            if (req.path.startsWith('/dashboard/user'))
                return res.sendFile(path.join(__dirname, 'public', 'user.html'));

            return res.status(403).json({
                message: 'You have insufficient permissions.'
            });
        }

        next();
    });
}

const generateRandomString = (length) => {
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
    let result = '';
    for (let i = 0; i < length; i++)
        result += characters.charAt(Math.floor(Math.random() * characters.length));

    return result;
}

// endregion


// region ROUTES

app.post(
    '/api/upload',
    checkAdmin,
    upload.single('file'),
    async (req, res) => {
        if (!req.file)
            return res.status(400).json({message: 'No file uploaded'});

        try {
            const type = await fileTypeFromFile(req.file.path);
            const filename = uuidv4();

            fs.renameSync(req.file.path, __dirname + "/uploads/" + filename);

            res.status(200).json({
                message: 'Image uploaded successfully',
                path: `/api/uploads/${filename}`
            });
        } catch (error) {
            console.error('Error handling file upload:', error);
            res.status(500).json({
                message: 'Error handling file upload'
            });
        }
    }
);

app.post(
    '/api/store-url',
    checkAdmin,
    async (req, res) => {
        const {url} = req.body;
        if (!url)
            return res.status(400).json({message: 'URL not provided'});

        try {
            const response = await axios.get(url, {
                responseType: "stream"
            });
            const fileName = uuidv4();
            const fileStream = fs.createWriteStream(path.join(uploadDir, fileName));
            response.data.pipe(fileStream);

            fileStream.on('finish', async () => {
                fileStream.close();
                res.status(200).json({
                    message: 'File stored from URL successfully',
                    path: `/api/uploads/${fileName}`
                });
            });
        } catch (error) {
            console.error('Error storing file from URL:', error);
            res.status(500).json({
                message: 'Error storing file from URL'
            });
        }
    }
);

app.get(
    '/api/uploads/:filename',
    checkAdmin,
    (req, res) => {
        const fileName = req.params.filename;
        const filePath = path.join(uploadDir, fileName);

        fs.access(filePath, fs.constants.F_OK, (err) => {
            if (err)
                return res.status(404).json({
                    message: 'File not found'
                });

            res.sendFile(filePath);
        });
    }
);

app.get(
    '/api/uploads',
    checkAdmin,
    (req, res) => {

        fs.readdir(uploadDir, (err, files) => {
            if (err)
                return res.status(500).json({message: 'Unable to scan files'});

            res.json(files);
        });
    }
);

app.post(
    '/api/llm',
    checkAdmin,
    async (req, res) => {
        const {username} = req.body;

        try {
            const response = await axios.post(
                "http://ollama:8000/",
                {username, t: 1},
                {responseType: "text"}
            );

            res.send(response.data);
        } catch (error) {
            res.status(500).send(error.data || "Error occurred while fetching data");
        }
    }
);

app.post(
    '/api/register',
    (req, res) => {
        const {email, password} = req.body;

        const existingUser = users.find(user => user.email === email);
        if (existingUser)
            return res.status(400).json({
                message: 'User already exists'
            });

        const hashedPassword = bcrypt.hashSync(password, 10);

        const newUser = {
            user_type: 'user',
            ...req.body,
            password: hashedPassword,
        };
        users.push(newUser);

        res.status(201).json({
            message: 'User registered successfully'
        });
    }
);

app.post(
    '/api/login',
    (req, res) => {
        const {email, password} = req.body;

        const user = users.find(user => user.email === email);
        if (!user || !bcrypt.compareSync(password, user.password))
            return res.status(401).json({message: 'Invalid email or password'});

        const token = jwt.sign(user, jwtToken, {expiresIn: '1h'});

        res.cookie('jwt', token, {httpOnly: true, maxAge: 3600000});

        if (user.user_type !== 'admin')
            return res.status(200).send("user");
        res.set('Location', '/dashboard/admin');
        return res.status(200).send("admin");
    }
);


app.get(
    '/dashboard/user',
    checkAdmin,
    (req, res) => {
        res.sendFile(path.join(__dirname, 'public', 'user.html'));
    }
);

app.get(
    '/dashboard/admin',
    checkAdmin,
    (req, res) => {
        res.sendFile(path.join(__dirname, 'public', 'admin.html'));
    }
);

app.get(
    '/api/docs',
    (req, res) => {
        const clientIp = req.headers['x-forwarded-for'] || req.connection.remoteAddress;

        if (clientIp === '127.0.0.1' || clientIp === '::1')
            res.sendFile(path.join(__dirname, 'api-docs.txt'));
        else
            res.status(403).json({
                    message: 'Access denied'
                }
            );
    }
);

app.post(
    '/api/logout',
    (req, res) => {
        res.clearCookie('jwt', {httpOnly: true});
        res.status(200).json({
            message: 'Logged out successfully'
        });
    }
);

//endregion


const jwtToken = generateRandomString(20);

const PORT = process.env.PORT || 3000;
const HOST = process.env.HOST || '0.0.0.0';
app.listen(PORT, HOST, () => {
    console.log(`Server is running on http://${HOST}:${PORT}`);
});
