#!/bin/bash
set -e

TEMPLATE_NAME="k3s-ctf-template"

# Check if running as root
if [ "$EUID" -ne 0 ]; then
  echo "[!] Please run as root"
  exit 1
fi

echo "[+] Checking and installing required dependencies..."

if ! command -v snap &> /dev/null; then
    echo "[+] Installing snapd..."
    apt-get update
    apt-get install -y snapd zip unzip jq
    systemctl enable --now snapd.socket
    # Wait for snapd to initialize
    echo "Waiting for snapd..."
    sleep 15
fi

# Check and install LXD/LXC
if ! command -v lxc &> /dev/null; then
    echo "[+] Installing LXD/LXC via snap..."
    snap install lxd
    # Initialize LXD with default settings if not already initialized
    
fi
(lxc storage ls | grep default) || (echo "[+] Initializing LXD..." && lxd init --auto)
# We spin up a ton of containers for teams, of course they'll have a template

echo "[+] Creating LXC container template..."

# Check if template already exists and delete it if it does just in case
if lxc info $TEMPLATE_NAME &>/dev/null; then
    echo "[+] Template container already exists, removing it..."
    lxc stop $TEMPLATE_NAME --force || true
    lxc delete $TEMPLATE_NAME || true
fi


echo "[+] Creating new template container..."
lxc launch ubuntu:24.04 $TEMPLATE_NAME

# DO NOT PUT security.privileged=true HERE OR I'LL FIND AND MURDER YOU
echo "[+] Configuring container security settings..."
lxc config set $TEMPLATE_NAME security.nesting=true security.syscalls.intercept.mknod=true security.syscalls.intercept.setxattr=true


echo "[+] Waiting for container to be ready..."
sleep 10

# Docker for image building (On second thought, it'll be easier to just build app here and save rootfs... but oh well)
echo "[+] Installing Docker in the container..."
lxc exec $TEMPLATE_NAME -- bash -c "apt-get update && apt-get install -y curl"
lxc exec $TEMPLATE_NAME -- bash -c "curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh"

echo "[+] Installing additional tools..."
lxc exec $TEMPLATE_NAME -- bash -c "apt-get update && apt-get install -y unzip jq curl zip"

# Install K3s without LB (Kubelet in user NS is lowkey important)
echo "[+] Installing K3s..."
lxc exec $TEMPLATE_NAME -- bash -c "curl -sfL https://get.k3s.io | sh -s - --kubelet-arg=feature-gates=KubeletInUserNamespace=true --disable=traefik"

echo "[+] Waiting for K3s to be ready..."
sleep 30

# Please work
echo "[+] Checking node status..."
lxc exec $TEMPLATE_NAME -- kubectl get nodes -o wide
lxc exec $TEMPLATE_NAME -- kubectl describe node

# Copy challenge files to the container
echo "[+] Copying challenge files to the template..."
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Create a directory for challenge files
lxc exec $TEMPLATE_NAME -- mkdir -p /root/ctf-challenge

# Copy k8s directory
lxc exec $TEMPLATE_NAME -- mkdir -p /root/ctf-challenge/k8s
for file in "$SCRIPT_DIR"/k8s/*; do
    lxc file push "$file" $TEMPLATE_NAME/root/ctf-challenge/k8s/
done

# Copy health-check-service as a zip file
echo "[+] Copying health-check-service..."
cd "$SCRIPT_DIR"
zip -r /tmp/health-check-service.zip health-check-service
lxc file push /tmp/health-check-service.zip $TEMPLATE_NAME/tmp/
lxc exec $TEMPLATE_NAME -- bash -c "unzip /tmp/health-check-service.zip -d /root/ctf-challenge/"
rm /tmp/health-check-service.zip

# Pull required images
echo "[+] Pulling required images..."
lxc exec $TEMPLATE_NAME -- k3s ctr i pull docker.io/curlimages/curl:latest

# Build the health check service image
echo "[+] Building health check service image in template..."
lxc exec $TEMPLATE_NAME -- bash -c "cd /root/ctf-challenge/health-check-service && docker build -t health-check-service:latest ."
lxc exec $TEMPLATE_NAME -- bash -c "docker save health-check-service:latest -o /root/health-check-service.tar"
lxc exec $TEMPLATE_NAME -- bash -c "k3s ctr -n k8s.io image import /root/health-check-service.tar"

echo "[+] Creating snapshot of the template container..."
lxc stop $TEMPLATE_NAME
lxc snapshot $TEMPLATE_NAME template

echo "[+] Template container created successfully!"
echo "[+] Spin up some containers with setup-team.sh [team_id]"
